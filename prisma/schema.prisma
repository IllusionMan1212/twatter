// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(cuid())
  displayName              String
  username                 String    @unique
  email                    String    @unique
  password                 String
  avatarURL                String?
  restricted               Boolean   @default(false)
  isAdmin                  Boolean   @default(false)
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?
  totpSecret               String?   @db.VarChar(64)
  twoFactorAuth            Boolean   @default(false)
  createdAt                DateTime  @default(now())

  posts          Post[]
  conversations  ConversationMember[]
  settings       UserSettings?
  eventInterests EventInterest[]
  likes          PostLike[]
  reports        PostReport[]
}

model UserSettings {
  userId       String  @id
  allowAllDMs  Boolean @default(true)
  readReceipts Boolean @default(true)
  User         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String   @id
  authorId  String
  content   String?
  createdAt DateTime @default(now())
  parentId  String?
  deleted   Boolean  @default(false)

  author      User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent      Post?            @relation(name: "comment", fields: [parentId], references: [id])
  children    Post[]           @relation(name: "comment")
  attachments PostAttachment[]
  likes       PostLike[]
  reports     PostReport[]
}

model PostLike {
  userId String
  postId String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model PostAttachment {
  postId   String
  url      String
  thumbUrl String
  bgColor  String @default("#000000")

  Post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, url])
}

model Event {
  id          String   @id
  title       String
  time        DateTime
  location    String
  imageURL    String?
  description String
  createdAt   DateTime @default(now())

  interest EventInterest[]
}

model EventInterest {
  eventId String
  userId  String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([eventId, userId])
}

model Conversation {
  id          String   @id @default(cuid())
  lastMessage String   @default("")
  updatedAt   DateTime @default(now())
  createdAt   DateTime @default(now())

  messages Message[]
  members  ConversationMember[]
}

model ConversationMember {
  userId          String
  conversationId  String
  isParticipating Boolean @default(false)

  Conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     Message[]

  @@id([userId, conversationId])
}

model MessageAttachment {
  messageId String @unique
  url       String
  thumbUrl  String
  bgColor   String @default("#000000")
  height    Int
  width     Int

  Message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([messageId, url])
}

model Message {
  id             String   @id @default(cuid())
  content        String
  memberId       String
  conversationId String
  wasRead        Boolean  @default(false)
  deleted        Boolean  @default(false)
  createdAt      DateTime @default(now())

  Conversation       Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  ConversationMember ConversationMember? @relation(fields: [memberId, conversationId], references: [userId, conversationId])
  Attachment         MessageAttachment?
}

enum ReportReason {
  NudityOrSex
  TerrorismOrViolence
  Spam
  Other
}

model PostReport {
  id          String       @id @default(cuid())
  postId      String
  submitterId String
  reason      ReportReason
  comments    String?
  resolved    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  Post      Post @relation(fields: [postId], references: [id])
  Submitter User @relation(fields: [submitterId], references: [id])
}
