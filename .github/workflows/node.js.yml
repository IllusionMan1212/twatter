# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build Application

on:
  push:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
    - run: yarn install
    - name: Write .env file
      run: |
        echo "NEXT_PUBLIC_PORT=${{ secrets.PORT }}" >> .env
        echo "NEXT_PUBLIC_DOMAIN=${{ secrets.DOMAIN }}" >> .env
        echo "NEXT_PUBLIC_NOVU_APP_ID=${{ secrets.NOVU_APP_ID }}" >> .env
    - run: yarn run build

    - name: tarball the build
      shell: bash
      run: tar czvf twatter-build.tar.gz .next/ dist/

    - name: upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: twatter-build.tar.gz
        path: ./twatter-build.tar.gz

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: twatter-build.tar.gz
          path: ./twatter-build.tar.gz

      - name: scp the build
        uses: garygrossgarten/github-action-scp@release
        with:
          local: twatter-build.tar.gz
          remote: /home/${{ secrets.USERNAME }}/
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          privateKey: ${{ secrets.KEY }}

      - name: Deploy using ssh
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: 22
          script: |
            cd repos/twatter
            git pull
            yarn install
            npx prisma migrate deploy
            npx prisma generate
            cd ../..
            tar xf twatter-build.tar.gz
            cp -r repos/twatter/dist/server/cdn dist/server/cdn
            cp repos/twatter/dist/server/IP2LOCATION-DB.BIN dist/server/IP2LOCATION-DB.BIN
            rm -r repos/twatter/.next
            rm -r repos/twatter/dist
            mv .next repos/twatter/.next
            mv dist repos/twatter/dist
            rm twatter-build.tar.gz
            pm2 restart twatter
